#include <iostream>
#include <cmath>
#include <vector>
#include <algorithm>
#include <omp.h>

using namespace std;

// Struct to represent a data point
struct DataPoint {
    double x, y;
    int label;
};

// Function to calculate the Euclidean distance between two data points
double euclideanDistance(const DataPoint& a, const DataPoint& b) {
    double dx = a.x - b.x;
    double dy = a.y - b.y;
    return std::sqrt(dx * dx + dy * dy);
}

// Function to find the k nearest neighbors for a test point
std::vector<int> knn(const std::vector<DataPoint>& trainingData, const DataPoint& testPoint, int k) {
vector<pair<int,double>> distances(trainingData.size());


#pragma omp parallel for
    for(int i=0;i<trainingData.size();i++){
        distances[i]={i,euclideanDistance(testPoint,trainingData[i])};
    }

    // Sort the distances in ascending order
    std::sort(distances.begin(), distances.end(), [](const std::pair<int, double>& a, const std::pair<int, double>& b) {
        return a.second < b.second;
    });

    // Get the labels of the k nearest neighbors
    std::vector<int> neighbors(k);
    #pragma omp parallel for
    for (int i = 0; i < k; ++i) {
        neighbors[i] = trainingData[distances[i].first].label;
    }

    return neighbors;
}

int main() {
    // Example usage
    std::vector<DataPoint> trainingData = {
        {1.0, 2.0, 0},
        {2.0, 3.0, 1},
        {3.0, 4.0, 0},
        {4.0, 5.0, 1},
        {5.0, 6.0, 0}
    };

    DataPoint testPoint = {3.5, 4.5, -1};
    int k = 3;

    std::vector<int> neighbors = knn(trainingData, testPoint, k);

    std::cout << "Nearest neighbors' labels: ";
    for (int label : neighbors) {
        std::cout << label << " ";
    }
    std::cout << std::endl;

    return 0;
}